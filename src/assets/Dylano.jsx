/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei/core/useGLTF'
import { Canvas, useFrame } from '@react-three/fiber'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

export default function Model(props) {

  const vec = new THREE.Vector3()
  const [active, setActive] = useState(false)
  const [zoom, set] = useState(false)
  useEffect(() => {
    document.body.style.cursor = active ? 'pointer' : 'auto'},
    [active])


  // useFrame((state) => {
  //   const step = 0.1
  //   state.camera.fov = THREE.MathUtils.lerp(state.camera.fov, zoom ? 10 : 42, step)
  //   state.camera.position.lerp(vec.set(zoom ? 25 : 40, zoom ? 1 : 15, zoom ? 0 : 60), step)
  //   state.camera.lookAt(105.1739, 0, -183.56001)
  //   state.camera.updateProjectionMatrix()
  // })

  const group = useRef(null)
  const { nodes, materials } = useGLTF('/assets/compressed-dylano.glb')
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Dylano.geometry}
        material={materials['Material #282']}
        position={[105.1739, 0, -183.56001]}
        userData={{ name: 'Dylano', body: 'Dylano doos' }}
        onClick={() => set(!zoom)} onPointerOver={() => setActive(true)} onPointerOut={() => setActive(false)}
      />
    </group>
  )
}

useGLTF.preload('/assets/compressed-dylano.glb')
