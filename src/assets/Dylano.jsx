/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei/core/useGLTF'
import { Canvas, useFrame } from '@react-three/fiber'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

export default function Model(props) {
  const [active, setActive] = useState(false)
  useEffect(() => {
    document.body.style.cursor = active ? 'pointer' : 'auto'
  }, [active])

  const group = useRef(null)
  const { nodes, materials } = useGLTF('/assets/compressed-dylano.glb')

  let position
  if (group.current !== null) position = group.current.position

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={group}
        castShadow
        receiveShadow
        geometry={nodes.Dylano.geometry}
        material={materials['Material #282']}
        // position={props.position}
        position={[105.1739, 0, -183.56001]}
        userData={{ name: 'Dylano', body: 'Dylano doos' }}
        onClick={() =>
          props.playFocusAnimations(position.x, position.y, position.z)
        }
        onPointerOver={() => setActive(true)}
        onPointerOut={() => setActive(false)}
      />
    </group>
  )
}

useGLTF.preload('/assets/compressed-dylano.glb')
